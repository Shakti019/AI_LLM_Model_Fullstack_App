from . import db
from flask_login import UserMixin

class User(db.Model):
    id=db.Column(db.Integer, primary_key=True)
    name=db.Column(db.String(100), nullable=False)
    email=db.Column(db.String(100),unique=True,nullable=False)
    password=db.Column(db.String(200),nullable=False)
    phone=db.Column(db.String(15),nullable=False)
    address=db.Column(db.String(200),nullable=False)
    agency_name=db.Column(db.String(100), nullable=False)
    agency_number=db.Column(db.String(50),nullable=False)
    agency_address=db.Column(db.String(200),nullable=False)
    country=db.Column(db.String(50), nullable=False)
    state=db.Column(db.String(50),nullable=False)
    region=db.Column(db.String(50),nullable=False)
    category=db.Column(db.String(50),nullable=False)
    # Add relationships
    exports = db.relationship('Export', backref='user', lazy=True)
    imports = db.relationship('Import', backref='user', lazy=True)
    transports = db.relationship('Transport', backref='user', lazy=True)

class Export(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_name = db.Column(db.String(100), nullable=False)
    product_category = db.Column(db.String(50), nullable=False)
    quality = db.Column(db.String(50), nullable=False)
    product_pricing = db.Column(db.String(10), nullable=False)
    loc_state = db.Column(db.String(50), nullable=False)
    loc_city = db.Column(db.String(50), nullable=False)
    landmark = db.Column(db.String(100), nullable=False)
    gps = db.Column(db.String(50), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    market_type = db.Column(db.String(50), nullable=False)
    export_date = db.Column(db.Date, nullable=False)
    market_analysis = db.Column(db.String(50), nullable=False)
    available_supply = db.Column(db.String(50), nullable=False)
    created_at = db.Column(db.DateTime, server_default=db.func.now())

class Import(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_name = db.Column(db.String(100), nullable=False)
    product_category = db.Column(db.String(50), nullable=False)
    quality = db.Column(db.String(50), nullable=False)
    product_pricing = db.Column(db.String(10), nullable=False)
    loc_state = db.Column(db.String(50), nullable=False)
    loc_city = db.Column(db.String(50), nullable=False)
    landmark = db.Column(db.String(100), nullable=False)
    gps = db.Column(db.String(50), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    source_market = db.Column(db.String(50), nullable=False)
    import_date = db.Column(db.Date, nullable=False)
    market_analysis = db.Column(db.Text, nullable=False)
    required_quantity = db.Column(db.String(50), nullable=False)
    created_at = db.Column(db.DateTime, server_default=db.func.now())

class Transport(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    vehicle_type = db.Column(db.String(50), nullable=False)
    vehicle_capacity = db.Column(db.String(50), nullable=False)
    transport_mode = db.Column(db.String(50), nullable=False)
    transport_cost = db.Column(db.Float, nullable=False)
    pickup_state = db.Column(db.String(50), nullable=False)
    pickup_city = db.Column(db.String(50), nullable=False)
    pickup_landmark = db.Column(db.String(100), nullable=False)
    pickup_gps = db.Column(db.String(50))
    pickup_address = db.Column(db.String(200), nullable=False)
    delivery_state = db.Column(db.String(50), nullable=False)
    delivery_city = db.Column(db.String(50), nullable=False)
    delivery_landmark = db.Column(db.String(100), nullable=False)
    delivery_gps = db.Column(db.String(50))
    delivery_address = db.Column(db.String(200), nullable=False)
    estimated_time = db.Column(db.String(50), nullable=False)
    transport_date = db.Column(db.Date, nullable=False)
    additional_notes = db.Column(db.Text)
    created_at = db.Column(db.DateTime, server_default=db.func.now())